{"version":3,"file":"static/js/412.374888f4.chunk.js","mappings":"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","sources":["components/buttonsLogin/ButtonsLogin.tsx","hooks/useInputRef.tsx","pages/register/Register.tsx","validations/libraryValidations.tsx"],"sourcesContent":["import React, {FC} from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport useInputRef from \"../../hooks/useInputRef\";\r\n\r\ninterface Props{\r\n    link: string;\r\n    btnRight: string;\r\n    btnLeft: string\r\n    inputFocus: ()=>void\r\n}\r\n\r\nconst ButtonsLogin:FC<Props> = ({\r\n                                    link,\r\n                                    btnRight,\r\n                                    btnLeft,\r\n                                    inputFocus}) => {\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"buttonsLogin\">\r\n\r\n            <Link to={link}>\r\n                <button className='buttonLogin'>\r\n                    {btnLeft}\r\n\r\n                </button>\r\n            </Link>\r\n\r\n            <button type='submit'\r\n                    onClick={inputFocus}\r\n                    className='buttonLogin'>\r\n                {btnRight}\r\n            </button>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ButtonsLogin;","import {useRef} from \"react\";\r\n\r\nconst useInputRef = () => {\r\n\r\n    const inputRef = useRef<HTMLInputElement>(null)\r\n\r\n    const inputFocus = () =>{\r\n        inputRef.current?.focus()\r\n    }\r\n    return{inputRef, inputFocus}\r\n\r\n}\r\n\r\nexport default useInputRef","import React, {ChangeEvent, FormEvent, useRef, useState} from 'react';\r\nimport {createUserWithEmailAndPassword} from 'firebase/auth'\r\nimport {auth} from '../../data/FireBaseConfig'\r\nimport {useNavigate} from 'react-router'\r\nimport TitleDecor from \"../../components/titleDecor/TitleDecor\";\r\nimport ButtonsLogin from \"../../components/buttonsLogin/ButtonsLogin\";\r\nimport {registerValidation} from '../../validations/libraryValidations'\r\nimport useInputRef from '../../hooks/useInputRef'\r\n\r\nexport interface IInputValueRregister {\r\n    email: string,\r\n    password: string,\r\n    passwordRepeated: string\r\n}\r\n\r\n\r\nconst Register = () => {\r\n\r\n    const navigate = useNavigate()\r\n    const [inputValueRregister, setInputValueRegister] = useState<IInputValueRregister>({\r\n        email: '',\r\n        password: '',\r\n        passwordRepeated: ''\r\n    })\r\n    const [errors, setErrors] = useState<string[] | string>([])\r\n    const {inputFocus, inputRef} = useInputRef()\r\n\r\n    const handleChange = (e: ChangeEvent<HTMLInputElement>): void => {\r\n        setInputValueRegister({\r\n            ...inputValueRregister,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n\r\n    const handleRegister = (e: FormEvent<HTMLFormElement>): void => {\r\n        e.preventDefault()\r\n\r\n        setErrors(registerValidation(inputValueRregister))\r\n\r\n        if (registerValidation(inputValueRregister).length > 0) {\r\n            return\r\n        }\r\n\r\n        createUserWithEmailAndPassword(auth,\r\n            inputValueRregister.email,\r\n            inputValueRregister.password)\r\n            .then(() => navigate('/'))\r\n            .catch(error => setErrors(error.code))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='headerSpacer'></div>\r\n            <form onSubmit={handleRegister}\r\n                  className='wrapper wrapper--login'>\r\n\r\n                <TitleDecor text={['załóż konto']}\r\n                            classContainer={''}\r\n                            classH2={''}\r\n                            classUnderline={'login__underline'}/>\r\n\r\n                <div className=\"login__inputs\">\r\n\r\n                    <label className='login__label'>\r\n                        Email\r\n                        <input type='text' name='email'\r\n                               value={inputValueRregister.email}\r\n                               onChange={handleChange}\r\n                               ref={inputRef}\r\n                               className='login__input'/>\r\n                    </label>\r\n\r\n                    <label className='login__label'>\r\n                        Haslo\r\n                        <input type='password' name='password'\r\n                               value={inputValueRregister.password}\r\n                               onChange={handleChange}\r\n                               className='login__input'/>\r\n                    </label>\r\n\r\n                    <label className='login__label'>\r\n                        Powtórz haslo\r\n                        <input type='password' name='passwordRepeated'\r\n                               value={inputValueRregister.passwordRepeated}\r\n                               onChange={handleChange}\r\n                               className='login__input'/>\r\n                    </label>\r\n\r\n                </div>\r\n\r\n                <p className='login__errors'>{errors}</p>\r\n\r\n                <ButtonsLogin link={'/logowanie'}\r\n                              btnRight='załuż konto'\r\n                              btnLeft='zaloguj się'\r\n                              inputFocus = {inputFocus}\r\n                />\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Register;","import {IInputValueRregister} from \"../pages/register/Register\";\r\n\r\n\r\ninterface IInputsValue {\r\n    name: string,\r\n    email: string,\r\n    message: string\r\n}\r\n\r\ninterface I_errors {\r\n    name:string,\r\n    email: string,\r\n    message: string\r\n}\r\n\r\nexport const section_5_FormValidation = (inputValue:IInputsValue) : I_errors=> {\r\n\r\n    const _errors = {name: '', email: '', message: ''}\r\n    const reg = /^[a-z\\d]+[\\w\\d.-]*@(?:[a-z\\d]+[a-z\\d-]+\\.){1,5}[a-z]{2,6}$/i;\r\n\r\n    if (inputValue.name.includes(' ') || !inputValue.name) {\r\n        _errors.name = 'imię powinno być jednym wyrazem'\r\n    }\r\n    if (!inputValue.email) {\r\n        _errors.email = 'podaj email'\r\n    } else if (!reg.test(inputValue.email)) {\r\n        _errors.email = \"email jest nieprawidłowy\"}\r\n\r\n    if (inputValue.message.length < 2) {\r\n        _errors.message = 'wiadomość minimum dwa znaki'\r\n    }\r\n    return _errors\r\n}\r\n\r\n\r\nexport const registerValidation = (inputValuRregister: IInputValueRregister)\r\n    :string | string[] => {\r\n\r\n    const _errors: string[] = []\r\n    const reg = /^[a-z\\d]+[\\w\\d.-]*@(?:[a-z\\d]+[a-z\\d-]+\\.){1,5}[a-z]{2,6}$/i;\r\n\r\n\r\n    if (!inputValuRregister.email) {\r\n        _errors.push('podaj email')\r\n    } else if (!reg.test(inputValuRregister.email)){\r\n        _errors.push('email jest nieprawidłowy')\r\n    }\r\n\r\n    if (inputValuRregister.password.length < 6) {\r\n        _errors.push('hasło musi mieć conajmniej 6 znaków')\r\n    }\r\n    if (inputValuRregister.passwordRepeated !== inputValuRregister.password ||\r\n        !inputValuRregister.passwordRepeated) {\r\n        _errors.push(\"hasła muszą być takie same\")\r\n    }\r\n    if (_errors.length > 0) {\r\n        return _errors.join(', ').concat('.')\r\n    }\r\n    return \"\"\r\n}\r\n\r\ninterface valueLogin{\r\n    email:string,\r\n    password: string\r\n}\r\n\r\nexport const loginValidation = (inputValueLogin: valueLogin)\r\n    : string | string[] => {\r\n\r\n    const _errors: string[] = []\r\n    const reg = /^[a-z\\d]+[\\w\\d.-]*@(?:[a-z\\d]+[a-z\\d-]+\\.){1,5}[a-z]{2,6}$/i;\r\n\r\n\r\n    if (!inputValueLogin.email) {\r\n        _errors.push('podaj email')\r\n    } else if (!reg.test(inputValueLogin.email)){\r\n        _errors.push('email jest nieprawidłowy')\r\n    }\r\n\r\n    if (inputValueLogin.password.length < 6) {\r\n        _errors.push('hasło musi mieć conajmniej 6 znaków')\r\n    }\r\n    if (_errors.length > 0) {\r\n        return _errors.join(', ').concat('.')\r\n    }\r\n    return \"\"\r\n}\r\n"],"names":["link","btnRight","btnLeft","inputFocus","className","to","type","onClick","inputRef","useRef","current","focus","navigate","useNavigate","useState","email","password","passwordRepeated","inputValueRregister","setInputValueRegister","errors","setErrors","useInputRef","handleChange","e","target","name","value","onSubmit","preventDefault","registerValidation","length","createUserWithEmailAndPassword","auth","then","catch","error","code","text","classContainer","classH2","classUnderline","onChange","ref","inputValuRregister","_errors","test","push","join","concat","loginValidation","inputValueLogin"],"sourceRoot":""}