{"version":3,"file":"static/js/67.c8683b84.chunk.js","mappings":"2JA6BA,IApB+B,SAAH,GAAmC,IAA9BA,EAAI,EAAJA,KAAMC,EAAQ,EAARA,SAAUC,EAAO,EAAPA,QAC7C,OAEI,iBAAKC,UAAU,eAAc,WAEzB,SAAC,KAAI,CAACC,GAAIJ,EAAK,UACX,mBAAQG,UAAU,cAAa,SAC1BF,OAIT,mBAAQI,KAAK,SACLF,UAAU,cAAa,SAC1BD,MAKjB,C,4ICsEA,UAlFiB,WAEb,IAAMI,GAAWC,EAAAA,EAAAA,MACjB,GAAqDC,EAAAA,EAAAA,UAAiC,CAClFC,MAAO,GACPC,SAAU,GACVC,iBAAkB,KACpB,eAJKC,EAAmB,KAAEC,EAAqB,KAKjD,GAA4BL,EAAAA,EAAAA,UAA8B,IAAG,eAAtDM,EAAM,KAAEC,EAAS,KAElBC,EAAe,SAACC,GAClBJ,GAAsB,kBACfD,GAAmB,cACrBK,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,QAElC,EAkBA,OACI,iCACI,gBAAKjB,UAAU,kBACf,kBAAMkB,SAnBS,SAACJ,GACpBA,EAAEK,iBAEFP,GAAUQ,EAAAA,EAAAA,IAAmBX,KAEzBW,EAAAA,EAAAA,IAAmBX,GAAqBY,OAAS,IAIrDC,EAAAA,EAAAA,IAA+BC,EAAAA,EAC3Bd,EAAoBH,MACpBG,EAAoBF,UACnBiB,MAAK,kBAAMrB,EAAS,IAAI,IACxBsB,OAAM,SAAAC,GAAK,OAAId,EAAUc,EAAMC,KAAK,GAC7C,EAMc3B,UAAU,yBAAwB,WAEpC,SAAC,IAAU,CAAC4B,KAAM,CAAC,4BACPC,eAAgB,GAChBC,QAAS,GACTC,eAAgB,sBAE5B,iBAAK/B,UAAU,gBAAe,WAE1B,mBAAOA,UAAU,eAAc,mBAE3B,kBAAOE,KAAK,OAAOc,KAAK,QACjBC,MAAOR,EAAoBH,MAC3B0B,SAAUnB,EACVb,UAAU,qBAGrB,mBAAOA,UAAU,eAAc,mBAE3B,kBAAOE,KAAK,WAAWc,KAAK,WACrBC,MAAOR,EAAoBF,SAC3ByB,SAAUnB,EACVb,UAAU,qBAGrB,mBAAOA,UAAU,eAAc,8BAE3B,kBAAOE,KAAK,WAAWc,KAAK,mBACrBC,MAAOR,EAAoBD,iBAC3BwB,SAAUnB,EACVb,UAAU,wBAKzB,cAAGA,UAAU,gBAAe,SAAEW,KAE9B,SAAC,IAAY,CAACd,KAAM,aACNC,SAAS,mBACTC,QAAQ,kCAItC,C,gFChFO,IAoBMqB,EAAqB,SAACa,GAG/B,IAAMC,EAAoB,GAiB1B,OAbKD,EAAmB3B,MAHZ,8DAKI6B,KAAKF,EAAmB3B,QACpC4B,EAAQE,KAAK,iCAFbF,EAAQE,KAAK,eAKbH,EAAmB1B,SAASc,OAAS,GACrCa,EAAQE,KAAK,oDAEbH,EAAmBzB,mBAAqByB,EAAmB1B,UAC1D0B,EAAmBzB,kBACpB0B,EAAQE,KAAK,6CAEbF,EAAQb,OAAS,EACVa,EAAQG,KAAK,MAAMC,OAAO,KAE9B,EACX,EAOaC,EAAkB,SAACC,GAG5B,IAAMN,EAAoB,GAa1B,OATKM,EAAgBlC,MAHT,8DAKI6B,KAAKK,EAAgBlC,QACjC4B,EAAQE,KAAK,iCAFbF,EAAQE,KAAK,eAKbI,EAAgBjC,SAASc,OAAS,GAClCa,EAAQE,KAAK,oDAEbF,EAAQb,OAAS,EACVa,EAAQG,KAAK,MAAMC,OAAO,KAE9B,EACX,C","sources":["components/ButtonsLogin.tsx","pages/Register.tsx","validations/libraryValidations.tsx"],"sourcesContent":["import React, {FC} from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\ninterface Props{\r\n    link: string;\r\n    btnRight: string;\r\n    btnLeft: string\r\n}\r\n\r\nconst ButtonsLogin:FC<Props> = ({link, btnRight, btnLeft}) => {\r\n    return (\r\n\r\n        <div className=\"buttonsLogin\">\r\n\r\n            <Link to={link}>\r\n                <button className='buttonLogin'>\r\n                    {btnRight}\r\n                </button>\r\n            </Link>\r\n\r\n            <button type='submit'\r\n                    className='buttonLogin'>\r\n                {btnLeft}\r\n            </button>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ButtonsLogin;","import React, {ChangeEvent, FormEvent, useState} from 'react';\r\nimport {createUserWithEmailAndPassword} from 'firebase/auth'\r\nimport {auth} from '../data/FireBaseConfig'\r\nimport {useNavigate} from 'react-router'\r\nimport TitleDecor from \"../components/TitleDecor\";\r\nimport ButtonsLogin from \"../components/ButtonsLogin\";\r\nimport {registerValidation} from '../validations/libraryValidations'\r\n\r\nexport interface IInputValueRregister {\r\n    email: string,\r\n    password: string,\r\n    passwordRepeated: string\r\n}\r\n\r\n\r\nconst Register = () => {\r\n\r\n    const navigate = useNavigate()\r\n    const [inputValueRregister, setInputValueRegister] = useState <IInputValueRregister> ({\r\n        email: '',\r\n        password: '',\r\n        passwordRepeated: ''\r\n    })\r\n    const [errors, setErrors] = useState <string[] | string> ([])\r\n\r\n    const handleChange = (e:ChangeEvent<HTMLInputElement>):void => {\r\n        setInputValueRegister({\r\n            ...inputValueRregister,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    const handleRegister = (e:FormEvent<HTMLFormElement>):void => {\r\n        e.preventDefault()\r\n\r\n        setErrors(registerValidation(inputValueRregister))\r\n\r\n        if (registerValidation(inputValueRregister).length > 0) {\r\n            return\r\n        }\r\n\r\n        createUserWithEmailAndPassword(auth,\r\n            inputValueRregister.email,\r\n            inputValueRregister.password)\r\n            .then(() => navigate('/'))\r\n            .catch(error => setErrors(error.code))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='headerSpacer'></div>\r\n            <form onSubmit={handleRegister}\r\n                  className='wrapper wrapper--login'>\r\n\r\n                <TitleDecor text={['załóż konto']}\r\n                            classContainer={''}\r\n                            classH2={''}\r\n                            classUnderline={'login__underline'}/>\r\n\r\n                <div className=\"login__inputs\">\r\n\r\n                    <label className='login__label'>\r\n                        Email\r\n                        <input type='text' name='email'\r\n                               value={inputValueRregister.email}\r\n                               onChange={handleChange}\r\n                               className='login__input'/>\r\n                    </label>\r\n\r\n                    <label className='login__label'>\r\n                        Haslo\r\n                        <input type='password' name='password'\r\n                               value={inputValueRregister.password}\r\n                               onChange={handleChange}\r\n                               className='login__input'/>\r\n                    </label>\r\n\r\n                    <label className='login__label'>\r\n                        Powtórz haslo\r\n                        <input type='password' name='passwordRepeated'\r\n                               value={inputValueRregister.passwordRepeated}\r\n                               onChange={handleChange}\r\n                               className='login__input'/>\r\n                    </label>\r\n\r\n                </div>\r\n\r\n                <p className='login__errors'>{errors}</p>\r\n\r\n                <ButtonsLogin link={'/logowanie'}\r\n                              btnRight='zaloguj się'\r\n                              btnLeft='załóż konto'/>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Register;","import {IInputValueRregister} from \"../pages/Register\";\r\n\r\n\r\ninterface IInputsValue {\r\n    name: string,\r\n    email: string,\r\n    message: string\r\n}\r\n\r\ninterface I_errors {\r\n    name:string,\r\n    email: string,\r\n    message: string\r\n}\r\n\r\nexport const section_5_FormValidation = (inputValue:IInputsValue) : I_errors=> {\r\n\r\n    const _errors = {name: '', email: '', message: ''}\r\n    const reg = /^[a-z\\d]+[\\w\\d.-]*@(?:[a-z\\d]+[a-z\\d-]+\\.){1,5}[a-z]{2,6}$/i;\r\n\r\n    if (inputValue.name.includes(' ') || !inputValue.name) {\r\n        _errors.name = 'imię powinno być jednym wyrazem'\r\n    }\r\n    if (!inputValue.email) {\r\n        _errors.email = 'podaj email'\r\n    } else if (!reg.test(inputValue.email)) {\r\n        _errors.email = \"email jest nieprawidłowy\"}\r\n\r\n    if (inputValue.message.length < 2) {\r\n        _errors.message = 'wiadomość minimum dwa znaki'\r\n    }\r\n    return _errors\r\n}\r\n\r\n\r\nexport const registerValidation = (inputValuRregister: IInputValueRregister)\r\n    :string | string[] => {\r\n\r\n    const _errors: string[] = []\r\n    const reg = /^[a-z\\d]+[\\w\\d.-]*@(?:[a-z\\d]+[a-z\\d-]+\\.){1,5}[a-z]{2,6}$/i;\r\n\r\n\r\n    if (!inputValuRregister.email) {\r\n        _errors.push('podaj email')\r\n    } else if (!reg.test(inputValuRregister.email)){\r\n        _errors.push('email jest nieprawidłowy')\r\n    }\r\n\r\n    if (inputValuRregister.password.length < 6) {\r\n        _errors.push('hasło musi mieć conajmniej 6 znaków')\r\n    }\r\n    if (inputValuRregister.passwordRepeated !== inputValuRregister.password ||\r\n        !inputValuRregister.passwordRepeated) {\r\n        _errors.push(\"hasła muszą być takie same\")\r\n    }\r\n    if (_errors.length > 0) {\r\n        return _errors.join(', ').concat('.')\r\n    }\r\n    return \"\"\r\n}\r\n\r\ninterface valueLogin{\r\n    email:string,\r\n    password: string\r\n}\r\n\r\nexport const loginValidation = (inputValueLogin: valueLogin)\r\n    : string | string[] => {\r\n\r\n    const _errors: string[] = []\r\n    const reg = /^[a-z\\d]+[\\w\\d.-]*@(?:[a-z\\d]+[a-z\\d-]+\\.){1,5}[a-z]{2,6}$/i;\r\n\r\n\r\n    if (!inputValueLogin.email) {\r\n        _errors.push('podaj email')\r\n    } else if (!reg.test(inputValueLogin.email)){\r\n        _errors.push('email jest nieprawidłowy')\r\n    }\r\n\r\n    if (inputValueLogin.password.length < 6) {\r\n        _errors.push('hasło musi mieć conajmniej 6 znaków')\r\n    }\r\n    if (_errors.length > 0) {\r\n        return _errors.join(', ').concat('.')\r\n    }\r\n    return \"\"\r\n}\r\n"],"names":["link","btnRight","btnLeft","className","to","type","navigate","useNavigate","useState","email","password","passwordRepeated","inputValueRregister","setInputValueRegister","errors","setErrors","handleChange","e","target","name","value","onSubmit","preventDefault","registerValidation","length","createUserWithEmailAndPassword","auth","then","catch","error","code","text","classContainer","classH2","classUnderline","onChange","inputValuRregister","_errors","test","push","join","concat","loginValidation","inputValueLogin"],"sourceRoot":""}